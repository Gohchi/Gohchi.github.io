<html>
  <head>
    <title>Mosaicos</title>
    <!-- <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script> -->
    <script src="https://cdn.jsdelivr.net/npm/vue@2"></script> <!-- release -->
  </head>
  <body>
    <div id="app">
      {{ message }}
      <fieldset>
        <legend>Tipo de hoja</legend>
        <select v-model="size">
          <option v-bind:value="type.test">test</option>
          <option v-bind:value="type.A4">A4</option>
          <option v-bind:value="type.A3">A3</option>
        </select>
        <span v-if="size">({{ size.height }}x{{ size.width }})</span>
      </fieldset>
      <fieldset>
        <legend>Propiedades</legend>
        <input v-model="imageSizeWidth" placeholder="Ancho" />
        <input v-model="imageSizeHeight" placeholder="Alto" />
      </fieldset>
      <fieldset>
        <legend>Acciones</legend>
        <button v-bind:disabled="!ready" v-on:click="refresh">Actualizar</button>
        <button @click="saveCanvas" disabled title="save using right click">Download</button>
        <input type="file" id="file" v-on:change="refresh">
      </fieldset>
      <canvas id="canvas"
        v-if="size"
        v-bind:width="size.width"
        v-bind:height="size.height"
        v-bind:style="styleCanvas"
      ></canvas>
    </div>
    <script>

      var app = new Vue({
        el: '#app',
        data: {
          type: {
            A4: { height: 2480, width: 3508 },
            A3: { height: 4961, width: 3605 },
          },
          imageSizeHeight: null,
          imageSizeWidth: null,
          size: null,
          message: 'Seleccione un tipo de hoja y cargue una imagen para armar el mosaico.',
          ready: false
        },
        created: function () {
          this.size = this.type.A4;
        },
        computed: {
          styleCanvas: function () {
            return {
              // border: '3px solid red'
            }
          }
        },
        methods: {
          refresh: function () {
            var fn = () => {
              this.ready = true;
              var canvas = document.getElementById('canvas');
              var ctx = canvas.getContext('2d');

              var pattern = ctx.createPattern(img, 'repeat');
              ctx.fillStyle = pattern;
              // ctx.fillRect(0, 0, 3508, 2480);
              ctx.fillRect(0, 0, this.size.width, this.size.height);
            }

            var img = this.imageSizeHeight && this.imageSizeWidth
              ? new Image( this.imageSizeWidth, this.imageSizeHeight ) : new Image();
            setTimeout(() => {
              var input = document.getElementById('file');
              var file = input.files[0];
              if (file) {
                this.ready = true;
                var reader  = new FileReader();

                reader.onloadend = () => {
                  img.src = reader.result;
                  setTimeout(() => {
                    fn();
                  }, 0);
                }

                reader.readAsDataURL(file);
              } else {
                fn();
              }
            }, 0);

          },
          saveCanvas: function() {
            var canvas = document.getElementById('canvas');
          }
        }
      })
    </script>
  </body>
</html>